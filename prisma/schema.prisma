// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// User model for authentication
model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  phoneNumber   String?   @unique
  phoneVerified DateTime?
  role          UserRole  @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts       Account[]
  sessions       Session[]
  orders         Order[]
  cart           CartItem[]
  addresses      Address[]
  wishlist       Wishlist[]
  paymentMethods PaymentMethod[]

  @@map("users")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Address model for delivery
model Address {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  userId        String   @db.ObjectId
  name          String
  phone         String
  streetAddress String
  city          String
  region        String
  country       String   @default("Ghana")
  ghanaPostGPS  String? // Ghana Post GPS address
  landmark      String?
  isDefault     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders Order[]

  @@map("addresses")
}

// Payment Method model
model PaymentMethod {
  id            String            @id @default(auto()) @map("_id") @db.ObjectId
  userId        String            @db.ObjectId
  type          PaymentMethodType
  provider      String? // stripe, paystack, momo, etc.

  // Card details (encrypted/tokenized)
  cardLast4       String?
  cardBrand       String?
  cardExpiryMonth Int?
  cardExpiryYear  Int?

  // Mobile Money details
  momoProvider String? // MTN, Vodafone, AirtelTigo
  momoNumber   String?

  // Bank Transfer details
  bankName          String?
  accountNumber     String?
  accountHolderName String?

  // Metadata
  displayName String // e.g., "Visa ending in 1234", "MTN Mobile Money"
  nickname    String?
  isDefault   Boolean  @default(false)
  isActive    Boolean  @default(true)
  expiresAt   DateTime? // For cards
  metadata    Json? // Additional metadata
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("payment_methods")
}

// Wishlist model
model Wishlist {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  productId String   @db.ObjectId
  variantId String?  @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  variant ProductVariant? @relation(fields: [variantId], references: [id])

  @@unique([userId, productId, variantId])
  @@map("wishlists")
}

// Product model
model Product {
  id               String              @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  slug             String              @unique
  description      String
  shortDescription String?
  price            Float
  comparePrice     Float?
  images           String[]
  category         String
  subcategory      String?
  tags             String[]
  isActive         Boolean             @default(true)
  isFeatured       Boolean             @default(false)
  stock            Int                 @default(0)
  weight           Float? // Weight in kg for shipping calculations
  dimensions       Json? // {length, width, height} in cm
  origin           String              @default("Ghana") // Where the product originates from
  vendor           String? // Local vendor/supplier
  availability     ProductAvailability @default(IN_STOCK)
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt

  // Relations
  cartItems    CartItem[]
  orderItems   OrderItem[]
  variants     ProductVariant[]
  wishlistItems Wishlist[]

  @@map("products")
}

// Product variants (size, color, etc.)
model ProductVariant {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  productId String   @db.ObjectId
  name      String // e.g., "Size", "Color"
  value     String // e.g., "Large", "Red"
  price     Float? // Additional price for this variant
  stock     Int      @default(0)
  sku       String?  @unique
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product    Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  cartItems  CartItem[]
  orderItems OrderItem[]
  wishlistItems Wishlist[]

  @@map("product_variants")
}

// Cart model
model CartItem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  productId String   @db.ObjectId
  variantId String?  @db.ObjectId
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  variant ProductVariant? @relation(fields: [variantId], references: [id])

  @@map("cart_items")
}

// Order model
model Order {
  id                    String        @id @default(auto()) @map("_id") @db.ObjectId
  orderNumber           String        @unique
  userId                String        @db.ObjectId
  addressId             String        @db.ObjectId
  status                OrderStatus   @default(PENDING)
  paymentStatus         PaymentStatus @default(PENDING)
  paymentMethod         String?
  subtotal              Float
  shippingCost          Float         @default(0)
  tax                   Float         @default(0)
  total                 Float
  currency              String        @default("GHS")
  notes                 String?
  stripePaymentIntentId String?
  deliveryDate          DateTime?
  trackingNumber        String?
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt

  user     User        @relation(fields: [userId], references: [id])
  address  Address     @relation(fields: [addressId], references: [id])
  items    OrderItem[]
  payments Payment[]

  @@map("orders")
}

// Order items
model OrderItem {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String  @db.ObjectId
  productId String  @db.ObjectId
  variantId String? @db.ObjectId
  quantity  Int
  price     Float // Price at time of order
  total     Float // quantity * price

  order   Order           @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product         @relation(fields: [productId], references: [id])
  variant ProductVariant? @relation(fields: [variantId], references: [id])

  @@map("order_items")
}

// Payment model
model Payment {
  id                    String        @id @default(auto()) @map("_id") @db.ObjectId
  orderId               String        @db.ObjectId
  amount                Float
  currency              String        @default("GHS")
  status                PaymentStatus @default(PENDING)
  method                String // stripe, momo, cash
  stripePaymentIntentId String?
  momoTransactionId     String?
  metadata              Json?
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("payments")
}

// Enums
enum UserRole {
  USER
  ADMIN
  VENDOR
}

enum PaymentMethodType {
  CARD
  MOBILE_MONEY
  BANK_TRANSFER
  CASH_ON_DELIVERY
  PAYPAL
  STRIPE
}

enum ProductAvailability {
  IN_STOCK
  OUT_OF_STOCK
  LOW_STOCK
  DISCONTINUED
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELLED
  RETURNED
}

enum PaymentStatus {
  PENDING
  PROCESSING
  PAID
  FAILED
  CANCELLED
  REFUNDED
}
